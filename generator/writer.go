package genutils

import (
	"bytes"
	"fmt"
	"time"

	"github.com/kucjac/gentools/types"
)

// WriterOption sets the WriterOptions
type WriterOption func(o *WriterOptions)

// WriterOptions are the meta data used for the writer.
type WriterOptions struct {
	GeneratorName string
	Author        string
	Date          time.Time
}

// NewFileGenerator creates new writing context used for generating code.
func NewFileGenerator(pkg *Package, fileName string, options ...WriterOption) *Writer {
	o := &WriterOptions{
		GeneratorName: "BuyPal Generator",
	}
	for _, option := range options {
		option(o)
	}
	return &Writer{
		options:   o,
		pkg:       pkg,
		buf:       bytes.Buffer{},
		pm:        pkgMap,
		importMap: newImportMap(pkg),
	}
}

// Writer is a structure that allows to easily generate golang types.
type Writer struct {
	options   *WriterOptions
	pkg       *Package
	pm        types.PackageMap
	importMap *ImportMap
	blocks    []Block
	buf       bytes.Buffer
}

// P writes a new line with a combination of given arguments like the fmt.Fprint does.
func (w *Writer) P(args ...interface{}) {
	for _, x := range args {
		fmt.Fprint(&w.buf, x)
	}
	fmt.Fprintln(&w.buf)
}

// Package writes the package name of given golang file.
func (w *Writer) Package() {
	w.P("package ", w.pkg.Identifier)
}

func (w *Writer) GenInfo() {
	w.P("// Code generated by ", w.options.GeneratorName, " DO NOT EDIT.")
	// Code generated by buypal-category-parser DO NOT EDIT.
	//
	// Date: 2020-12-18 01:04:03.922261347 +0100 CET m=+0.894002007
}

// Write writes the block definition in given position.
func (w *Writer) Write(b Block) {
	w.finishBlock()
	w.blocks = append(w.blocks, b)
}

// newBlock creates new content block which has it's own
func (w *Writer) newBlock(indent uint) *contentBlock {
	w.finishBlock()
	return &contentBlock{indent: int(indent)}
}

func (w *Writer) finishBlock() {
	previous := &contentBlock{}
	w.buf.WriteTo(&previous.buf)
	w.blocks = append(w.blocks, previous)
}

type Block interface {
	Content() ([]byte, error)
}
